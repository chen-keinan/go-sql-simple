// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chen-keinan/go-sql-simple/internal/db (interfaces: PostgresqlDriver)

// Package mocks is a generated GoMock package.
package db

import (
	"github.com/golang/mock/gomock"
	reflect "reflect"
)


// MockPostgresqlDriver is a mock of PostgresqlDriver interface.
type MockPostgresqlDriver struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresqlDriverMockRecorder
}

// MockPostgresqlDriverMockRecorder is the mock recorder for MockPostgresqlDriver.
type MockPostgresqlDriverMockRecorder struct {
	mock *MockPostgresqlDriver
}

// NewMockPostgresqlDriver creates a new mock instance.
func NewMockPostgresqlDriver(ctrl *gomock.Controller) *MockPostgresqlDriver {
	mock := &MockPostgresqlDriver{ctrl: ctrl}
	mock.recorder = &MockPostgresqlDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresqlDriver) EXPECT() *MockPostgresqlDriverMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockPostgresqlDriver) Begin() (TxMgr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(TxMgr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockPostgresqlDriverMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockPostgresqlDriver)(nil).Begin))
}

// Close mocks base method.
func (m *MockPostgresqlDriver) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPostgresqlDriverMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPostgresqlDriver)(nil).Close))
}

// Query mocks base method.
func (m *MockPostgresqlDriver) Query(arg0 string, arg1 ...interface{}) (RowMgr, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(RowMgr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockPostgresqlDriverMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockPostgresqlDriver)(nil).Query), varargs...)
}
